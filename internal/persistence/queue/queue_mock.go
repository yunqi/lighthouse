// Code generated by MockGen. DO NOT EDIT.
// Source: queue.go

// Package queue is a generated GoMock package.
package queue

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	packet "github.com/yunqi/lighthouse/internal/packet"
)

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Id mocks base method.
func (m *MockMessage) Id() packet.PacketId {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Id")
	ret0, _ := ret[0].(packet.PacketId)
	return ret0
}

// Id indicates an expected call of Id.
func (mr *MockMessageMockRecorder) Id() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Id", reflect.TypeOf((*MockMessage)(nil).Id))
}

// SetId mocks base method.
func (m *MockMessage) SetId(id packet.PacketId) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetId", id)
}

// SetId indicates an expected call of SetId.
func (mr *MockMessageMockRecorder) SetId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetId", reflect.TypeOf((*MockMessage)(nil).SetId), id)
}

// MockQueue is a mock of Queue interface.
type MockQueue struct {
	ctrl     *gomock.Controller
	recorder *MockQueueMockRecorder
}

// MockQueueMockRecorder is the mock recorder for MockQueue.
type MockQueueMockRecorder struct {
	mock *MockQueue
}

// NewMockQueue creates a new mock instance.
func NewMockQueue(ctrl *gomock.Controller) *MockQueue {
	mock := &MockQueue{ctrl: ctrl}
	mock.recorder = &MockQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueue) EXPECT() *MockQueueMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockQueue) Add(elem *Element) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", elem)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockQueueMockRecorder) Add(elem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockQueue)(nil).Add), elem)
}

// Clean mocks base method.
func (m *MockQueue) Clean() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clean")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clean indicates an expected call of Clean.
func (mr *MockQueueMockRecorder) Clean() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clean", reflect.TypeOf((*MockQueue)(nil).Clean))
}

// Close mocks base method.
func (m *MockQueue) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQueueMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueue)(nil).Close))
}

// Read mocks base method.
func (m *MockQueue) Read(packetIds []packet.PacketId) ([]*Element, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", packetIds)
	ret0, _ := ret[0].([]*Element)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockQueueMockRecorder) Read(packetIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockQueue)(nil).Read), packetIds)
}

// ReadInflight mocks base method.
func (m *MockQueue) ReadInflight(maxSize uint) ([]*Element, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInflight", maxSize)
	ret0, _ := ret[0].([]*Element)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInflight indicates an expected call of ReadInflight.
func (mr *MockQueueMockRecorder) ReadInflight(maxSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInflight", reflect.TypeOf((*MockQueue)(nil).ReadInflight), maxSize)
}

// Remove mocks base method.
func (m *MockQueue) Remove(pid packet.PacketId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", pid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockQueueMockRecorder) Remove(pid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockQueue)(nil).Remove), pid)
}

// Replace mocks base method.
func (m *MockQueue) Replace(elem *Element) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replace", elem)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Replace indicates an expected call of Replace.
func (mr *MockQueueMockRecorder) Replace(elem interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replace", reflect.TypeOf((*MockQueue)(nil).Replace), elem)
}

// MockNotifier is a mock of Notifier interface.
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *MockNotifierMockRecorder
}

// MockNotifierMockRecorder is the mock recorder for MockNotifier.
type MockNotifierMockRecorder struct {
	mock *MockNotifier
}

// NewMockNotifier creates a new mock instance.
func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &MockNotifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotifier) EXPECT() *MockNotifierMockRecorder {
	return m.recorder
}

// Dropped mocks base method.
func (m *MockNotifier) Dropped(elem *Element, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dropped", elem, err)
}

// Dropped indicates an expected call of Dropped.
func (mr *MockNotifierMockRecorder) Dropped(elem, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dropped", reflect.TypeOf((*MockNotifier)(nil).Dropped), elem, err)
}

// InflightAdded mocks base method.
func (m *MockNotifier) InflightAdded(delta int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InflightAdded", delta)
}

// InflightAdded indicates an expected call of InflightAdded.
func (mr *MockNotifierMockRecorder) InflightAdded(delta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InflightAdded", reflect.TypeOf((*MockNotifier)(nil).InflightAdded), delta)
}

// MsgQueueAdded mocks base method.
func (m *MockNotifier) MsgQueueAdded(delta int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MsgQueueAdded", delta)
}

// MsgQueueAdded indicates an expected call of MsgQueueAdded.
func (mr *MockNotifierMockRecorder) MsgQueueAdded(delta interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MsgQueueAdded", reflect.TypeOf((*MockNotifier)(nil).MsgQueueAdded), delta)
}
